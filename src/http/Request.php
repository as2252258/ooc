<?php

namespace Yoc\http;

use Exception;
use Yoc\base\Component;
use Yoc\exception\RequestException;

defined('REQUEST_OK') or define('REQUEST_OK', 0);
defined('REQUEST_FAIL') or define('REQUEST_FAIL', 500);

/**
 * Class HttpRequest
 *
 * @package Yoc\httpRequest
 *
 * @property-read $isPost
 * @property-read $isGet
 * @property-read $isOption
 * @property-read $isDelete
 * @property-read $method
 */
class Request extends Component
{

	/** @var int $fd */
	public $fd;

	/** @var HttpParams */
	public $params;

	/** @var HttpHeaders */
	public $headers;

	/** @var bool */
	public $isCli = FALSE;

	/** @var float */
	public $startTime;

	/**
	 * @return string
	 */
	public function getUri()
	{
		$uri = $this->headers->getHeader('request_uri');
		$uri = ltrim($uri, '/');
		if (empty($uri)) return '/';
		return $uri;
	}

	/**
	 * @return bool
	 */
	public function getIsPost()
	{
		return $this->getMethod() == 'post';
	}

	/**
	 * @return bool
	 */
	public function getIsOption()
	{
		return $this->getMethod() == 'options';
	}

	/**
	 * @return bool
	 */
	public function getIsGet()
	{
		return $this->getMethod() == 'get';
	}

	/**
	 * @return bool
	 */
	public function getIsDelete()
	{
		return $this->getMethod() == 'delete';
	}

	/**
	 * @return string
	 *
	 * 获取请求类型
	 */
	public function getMethod()
	{
		$head = $this->headers->getHeader('request_method');
		return strtolower($head);
	}

	/**
	 * @return bool
	 */
	public function getIsCli()
	{
		return $this->isCli === TRUE;
	}


	/**
	 * @param $name
	 * @param $value
	 *
	 * @throws \Exception
	 */
	public function __set($name, $value)
	{
		$method = 'set' . ucfirst($name);
		if (method_exists($this, $method)) {
			$this->$method($value);
		} else {
			parent::__set($name, $value); // TODO: Change the autogenerated stub
		}
	}

	/**
	 * @return mixed|null
	 */
	public function getIp()
	{
		$headers = $this->headers->getHeaders();
		if (!empty($headers['x-forwarded-for'])) return $headers['x-forwarded-for'];
		if (!empty($headers['request-ip'])) return $headers['request-ip'];
		if (!empty($headers['remote_addr'])) return $headers['remote_addr'];
		return NULL;
	}

	/**
	 * @return string
	 */
	public function getRuntime()
	{
		return sprintf('%.5f', microtime(TRUE) - $this->startTime);
	}

	/**
	 * @param $route
	 * @return bool
	 */
	public function is($route)
	{
		$uri = $this->headers->getHeader('request_uri');
		if (strpos($uri, '-') !== FALSE) {
			$string = [];
			$explode = explode('-', $uri);
			foreach ($explode as $val) {
				$string[] = ucfirst($val);
			}
			if (!empty($string)) {
				$string = lcfirst(implode($string));
			}
			if ($suffix = \Yoc::$app->urlManager->suffix) {
				$string = str_replace($suffix, '', $string);
			}
			return ltrim($string, '/') == $route;
		} else {
			if ($suffix = \Yoc::$app->urlManager->suffix) {
				$uri = str_replace($suffix, '', $uri);
			}
			if (strpos($route, '*') !== false) {
				$route = str_replace('*', '', $route);
				return strpos(ltrim($uri, '/'), ltrim($route, '/')) !== false;
			} else {
				return $route == ltrim($uri, '/');
			}
		}
	}


	public function getDebug()
	{
		$mtimestamp = sprintf("%.6f", microtime(true)); // 带毫秒的时间戳

		$timestamp = floor($mtimestamp); // 时间戳
		$milliseconds = round(($mtimestamp - $timestamp) * 1000); // 毫秒

		$datetime = date("Y-m-d H:i:s", $timestamp) . '.' . $milliseconds;

		$tmp = [
			'[Debug ' . $datetime . '] ',
			$this->getIp(),
			$this->getUri(),
			'`' . $this->headers->getHeader('user-agent') . '`',
			$this->getRuntime()
		];

		return implode(' ', $tmp);
	}

}
