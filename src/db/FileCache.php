<?php
/**
 * Created by PhpStorm.
 * User: whwyy
 * Date: 2018/5/2 0002
 * Time: 14:51
 */

namespace Yoc\db;


use Yoc\base\Component;

class FileCache extends Component
{

    /** @var string */
    public $path;

    /**
     * @throws \Exception
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (empty($this->path)) {
            $this->path = \Yoc::$app->runtimePath . '/data';
        }

        if (!is_dir($this->path)) {
            mkdir($this->path, 775);
        }

        if (!is_writeable($this->path)) {
            throw new \Exception("Directory has no write permission: {$this->path} .");
        }
    }

	/**
	 * @param $table
	 * @param $key
	 * @param $value
	 * @param string $end
	 */
    public function setCache($table, $key, $value, $end = '.data')
    {
        $tmpFile = $this->path . '/' . $table . '/' . $key . $end;
        if (!is_dir($this->path . '/' . $table)) {
            mkdir($this->path . '/' . $table);
        }
        if (!file_exists($tmpFile)) {
            touch($tmpFile);
        }
        $data = serialize($value);
        file_put_contents($tmpFile, $data, LOCK_EX);
    }

	/**
	 * @param $table
	 * @param $key
	 * @param string $end
	 * @return mixed|null
	 */
    public function get($table, $key, $end = '.data')
    {
        $tmpFile = $this->path . '/' . $table . '/' . $key . $end;
        if (!file_exists($tmpFile)) {
            return NULL;
        }
        return unserialize(file_get_contents($tmpFile));
    }

    /**
     * @param $table
     * @param $key
     * @return bool
     */
    public function has($table, $key, $end = '.data')
    {
        return file_exists($this->path . '/' . $table . '/' . $key . $end);
    }

    /**
     * @param $table
     * @return bool
     * @throws
     */
    public function clear($table, $clearHash = FALSE, $end = '.data')
    {
        if ($table instanceof ActiveRecord) {
            $table = $table::getTable();
        }
        $file = $this->path . '/' . $table;
        if (!is_dir($file)) {
            return TRUE;
        }
        $tmp = $file . DIRECTORY_SEPARATOR . $clearHash;
        if ($clearHash && is_file($tmp)) {
            @unlink($tmp . $end);
        } else {
            go(function () use ($file) {
                foreach (glob($file . '/*') as $val) {
                    if ($val == '.' || $val == '..') {
                        continue;
                    }
                    if (is_dir($val)) {
                        $this->unlink($val);
                    } else if (is_file($val)) {
                        @unlink($val);
                    }
                }
            });
        }
        return TRUE;
    }


    private function unlink($path)
    {
        if (!is_dir($path)) {
            return;
        }
        foreach (glob($path . '/*') as $val) {
            if (is_file($val)) {
                @unlink($val);
            }
        }
    }
}
