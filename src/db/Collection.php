<?php
/**
 * Created by PhpStorm.
 * User: whwyy
 * Date: 2018/4/4 0004
 * Time: 13:38
 */

namespace Yoc\db;

/**
 * Class Collection
 * @package Yoc\db
 * @property-read $length
 */
class Collection extends BCollect
{
	/**
	 * @return int
	 */
	public function getLength()
	{
		return count($this->_item);
	}

	/**
	 * @return array
	 */
	public function getItems()
	{
		return $this->_item; // TODO: Change the autogenerated stub
	}

	/**
	 * @param $field
	 *
	 * @return array|null
	 * @throws \Exception
	 */
	public function values($field)
	{
		if (empty($field) || !is_string($field)) {
			return NULL;
		}
		$_tmp = [];
		$data = $this->toArray();
		foreach ($data as $val) {
			/** @var ActiveRecord $val */
			$_tmp[] = $val[$field];
		}
		return $_tmp;
	}

	/**
	 * @param int $start
	 * @param int $length
	 *
	 * @return array
	 */
	public function slice($start = 0, $length = 20)
	{
		if (empty($this->_item) || !is_array($this->_item)) {
			return [];
		}
		if (count($this->_item) < $length) {
			return $this->_item;
		} else {
			return array_slice($this->_item, $start, $length);
		}
	}

	/**
	 * @param        $field
	 * @param string $setKey
	 *
	 * @return array|null
	 */
	public function column($field, $setKey = '')
	{
		$data = $this->toArray();
		if (empty($data)) {
			return [];
		}
		if (!empty($setKey) && is_string($setKey)) {
			return array_column($data, $field, $setKey);
		} else {
			return array_column($data, $field);
		}
	}

	/**
	 * @param $field
	 *
	 * @return float|int|null
	 */
	public function sum($field)
	{
		$array = $this->column($field);
		if (empty($array)) {
			return NULL;
		}
		return array_sum($array);
	}

	/**
	 * @return ActiveRecord|mixed
	 */
	public function current()
	{
		return current($this->_item);
	}

	/**
	 * @return int
	 */
	public function size()
	{
		return (int)count($this->_item);
	}

	/**
	 * @return array
	 * @throws
	 */
	public function toArray()
	{
		$array = [];
		foreach ($this->_item as $value) {
			$array[] = $value->toArray();
		}
		$this->_item = [];
		return $array;
	}

	public function isEmpty()
	{
		return count($this->_item) === 0;
	}
}
